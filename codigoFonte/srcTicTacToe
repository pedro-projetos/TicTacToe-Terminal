#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <string.h>

struct Move {
    int row;
    int col;
    char player;
};

void printBoard(char **board, int boardSize) {
    for (int i = 0; i < boardSize; i++) {
        for (int j = 0; j < boardSize; j++) {
            printf("%c ", board[i][j]);
        }
        printf("\n");
    }
}

bool checkWin(char **board, int boardSize, char symbol) {
    for (int i = 0; i < boardSize; i++) {
        bool winRow = true;
        bool winCol = true;
        for (int j = 0; j < boardSize; j++) {
            if (board[i][j] != symbol) {
                winRow = false;
            }
            if (board[j][i] != symbol) {
                winCol = false;
            }
        }
        if (winRow || winCol) {
            return true;
        }
    }

    bool winDiagonal1 = true;
    bool winDiagonal2 = true;
    for (int i = 0; i < boardSize; i++) {
        if (board[i][i] != symbol) {
            winDiagonal1 = false;
        }
        if (board[i][boardSize - 1 - i] != symbol) {
            winDiagonal2 = false;
        }
    }
    if (winDiagonal1 || winDiagonal2) {
        return true;
    }

    return false;
}

bool checkDraw(char **board, int boardSize) {
    for (int i = 0; i < boardSize; i++) {
        for (int j = 0; j < boardSize; j++) {
            if (board[i][j] == ' ') {
                return false;
            }
        }
    }
    return true;
}

void makeRobotMove(char **board, int boardSize, char symbol) {
    srand(time(NULL));
    while (true) {
        int row = rand() % boardSize;
        int col = rand() % boardSize;
        if (board[row][col] == ' ') {
            board[row][col] = symbol;
            break;
        }
    }
}

void displayMoveHistory(struct Move *moves, int totalMoves) {
    printf("\nHistórico de jogadas:\n");
    for (int i = 0; i < totalMoves; i++) {
        printf("Jogador %c jogou na posição (%d, %d)\n", moves[i].player, moves[i].row, moves[i].col);
    }
}

void displayRanking(struct Move *moves, int totalMoves) {
    int player1Wins = 0;
    int player2Wins = 0;
    for (int i = 0; i < totalMoves; i++) {
        if (moves[i].player == 'X') {
            player1Wins++;
        } else if (moves[i].player == 'O') {
            player2Wins++;
        }
    }
    printf("\nRanking de Vitórias:\n");
    printf("%s: %d vitórias\n", "Jogador 1", player1Wins);
    printf("%s: %d vitórias\n", "Jogador 2", player2Wins);
}

int main() {
    int option;
    int boardSize;
    char **board;
    char player1[100], player2[100];
    int totalMoves = 0;
    struct Move moves[100];

    printf("Bem-vindo ao Jogo da Velha!\n");

    while (true) {
        printf("\nMenu:\n");
        printf("1. Iniciar jogo\n");
        printf("2. Ver histórico de jogadas\n");
        printf("3. Ver ranking\n");
        printf("4. Sair\n");
        printf("Escolha uma opção: ");
        scanf("%d", &option);

        if (option == 1) {
            printf("Modo de jogo:\n");
            printf("1. Jogador vs Jogador\n");
            printf("2. Jogador vs Robô\n");
            printf("Escolha o modo de jogo: ");
            scanf("%d", &option);

            printf("Digite o nome do Jogador 1: ");
            scanf("%s", player1);

            if (option == 1) {
                printf("Digite o nome do Jogador 2: ");
                scanf("%s", player2);
            } else if (option == 2) {
                strcpy(player2, "Robô");
            }

            printf("Escolha o tamanho do tabuleiro (3 a 10): ");
            scanf("%d", &boardSize);

            board = (char **)malloc(boardSize * sizeof(char *));
            for (int i = 0; i < boardSize; i++) {
                board[i] = (char *)malloc(boardSize * sizeof(char));
            }

            for (int i = 0; i < boardSize; i++) {
                for (int j = 0; j < boardSize; j++) {
                    board[i][j] = ' ';
                }
            }

            printf("Tabuleiro inicial:\n");
            printBoard(board, boardSize);

            while (true) {
                char currentPlayer = (totalMoves % 2 == 0) ? 'X' : 'O';
                int row, col;

                if (strcmp(player2, "Robô") == 0 && currentPlayer == 'O') {
                    printf("Vez do Robô...\n");
                    makeRobotMove(board, boardSize, currentPlayer);
                    printf("Tabuleiro após a jogada do Robô:\n");
                    printBoard(board, boardSize);
                } else {
                    printf("Vez do Jogador %c.\n", currentPlayer);

                    do {
                        printf("Digite a linha (1 a %d): ", boardSize);
                        scanf("%d", &row);
                        printf("Digite a coluna (1 a %d): ", boardSize);
                        scanf("%d", &col);
                    } while (row < 1 || row > boardSize || col < 1 || col > boardSize || board[row - 1][col - 1] != ' ');

                    board[row - 1][col - 1] = currentPlayer;
                    printf("Tabuleiro após a jogada:\n");
                    printBoard(board, boardSize);
                }

                moves[totalMoves].row = row;
                moves[totalMoves].col = col;
                moves[totalMoves].player = currentPlayer;
                totalMoves++;

                if (checkWin(board, boardSize, currentPlayer)) {
                    printf("Jogador %c venceu!\n", currentPlayer);
                    displayRanking(moves, totalMoves);
                    break;
                } else if (checkDraw(board, boardSize)) {
                    printf("O jogo terminou em empate!\n");
                    displayRanking(moves, totalMoves);
                    break;
                }
            }
        } else if (option == 2) {
            displayMoveHistory(moves, totalMoves);
        } else if (option == 3) {
            displayRanking(moves, totalMoves);
        } else if (option == 4) {
            break;
        } else {
            printf("Opção inválida. Tente novamente.\n");
        }
    }

    // Liberar memória alocada para o tabuleiro
    for (int i = 0; i < boardSize; i++) {
        free(board[i]);
    }
    free(board);

    return 0;
}
